info={ver='1.23.0',author='hds536jhmk',website='https://github.com/hds536jhmk/APLib'}globalMonitor=term;globalMonitorName='term'globalMonitorGroup={enabled=false,list={}}globalMonitorWidth,globalMonitorHeight=globalMonitor.getSize()globalMonitorBuffer={enabled=false,pixels={lastFrame={},newFrame={}},clear=function()globalMonitorBuffer.pixels.newFrame={}end,write=function(a,b,text,c,d,e)assert(type(a)=='number','globalMonitorBuffer.write: x must be a number, got '..type(a))assert(type(b)=='number','globalMonitorBuffer.write: y must be a number, got '..type(b))assert(type(c)=='number','globalMonitorBuffer.write: fg must be a number, got '..type(c))assert(type(d)=='number'or e,'globalMonitorBuffer.write: bg must be a number, got '..type(d))b=tostring(b)if not globalMonitorBuffer.pixels.newFrame[b]then globalMonitorBuffer.pixels.newFrame[b]={}end;text=tostring(text)for f in text:gmatch('.')do local g=globalMonitorBuffer.pixels.newFrame[b][tostring(a)]local h=d;if e then if g then h=g.bg else h=globalMonitor.getBackgroundColor()end end;globalMonitorBuffer.pixels.newFrame[b][tostring(a)]={char=f,fg=c,bg=h}a=a+1 end end,draw=function()local i,j=globalMonitor.getCursorPos()local k=globalMonitor.getTextColor()local l=globalMonitor.getBackgroundColor()for b=1,globalMonitorHeight do local m=globalMonitorBuffer.pixels.newFrame[tostring(b)]for a=1,globalMonitorWidth do globalMonitor.setCursorPos(a,b)if m then local g=m[tostring(a)]if g then globalMonitor.setTextColor(g.fg)globalMonitor.setBackgroundColor(g.bg)globalMonitor.write(g.char)else globalMonitor.setBackgroundColor(l)globalMonitor.write(' ')end else globalMonitor.setBackgroundColor(l)globalMonitor.write(string.rep(' ',globalMonitorWidth))break end end end;globalMonitor.setCursorPos(i,j)globalMonitor.setTextColor(k)globalMonitor.setBackgroundColor(l)globalMonitorBuffer.pixels.lastFrame=globalMonitorBuffer.pixels.newFrame end}function setRenderer(n)assert(type(n)=='number','setRenderer: type must be a number, got '..type(n))if n==1 then globalMonitorBuffer.enabled=false elseif n==2 then globalMonitorBuffer.enabled=true end end;globalColor=colors.white;globalTextColor=colors.white;globalBackgroundTextColor=colors.black;globalRectangleType=1;globalLoop={enabled=false,autoClear=true,drawOnClock=true,clockSpeed=0.5,timerSpeed=0.1,clock=0,APLWDBroadcastOnClock=false,APLWDClearCacheOnDraw=true,stats={automaticPos=true,automaticPosOffset={x=0,y=0}},callbacks={onInit=function()end,onStop=function()end,onClock=function()end,onEvent=function()end,onTimer=function()end,onMonitorChange=function()end},events={draw={},touch={},tick={},key={},char={},mouse_drag={}},wasGroupChanged=false,selectedGroup='none',group={none={callbacks={onClock=function()end,onEvent=function()end,onTimer=function()end,onMonitorChange=function()end,onSet=function()end,onUnset=function()end},objs={}},LIBPrivate={callbacks={onClock=function()end,onEvent=function()end,onTimer=function()end,onMonitorChange=function()end,onSet=function()end,onUnset=function()end},objs={}}}}globalCallbacks={onBClear=function()end,onSetMonitor=function()end}renderEngine={classic=1,experimental=2}rectangleTypes={filled=1,hollow=2,checker=3}event={global={onBClear=1,onSetMonitor=2},clock={onClock=1},point={onDraw=1,onPress=2,onFailedPress=3},rectangle={onDraw=1,onPress=2,onFailedPress=3},header={onDraw=1,onPress=2,onFailedPress=3},label={onDraw=1,onPress=2,onFailedPress=3},button={onDraw=1,onPress=2,onFailedPress=3},menu={onDraw=1,onPress=2,onFailedPress=3,onButtonPress=4,onFailedButtonPress=5},percentagebar={onDraw=1,onPress=2,onFailedPress=3},memo={onDraw=1,onPress=2,onFailedPress=3,onEdit=4,onCursorBlink=5,onActivated=6,onDeactivated=7},window={onDraw=1,onPress=2,onFailedPress=3,onOBJPress=4,onFailedOBJPress=5,onEvent=6},objGroup={onDraw=1,onOBJPress=2,onFailedOBJPress=3},loop={group={onClock=1,onEvent=2,onTimer=3,onMonitorChange=4,onSet=5,onUnset=6},onInit=1,onStop=2,onClock=3,onEvent=4,onTimer=5,onMonitorChange=6}}function stringSplit(o,p)o=tostring(o)p=tostring(p)local q={}while true do local r=o:find(p)if r then table.insert(q,o:sub(1,r-1))o=o:sub(r+1)else table.insert(q,o)break end end;return q end;function tablesAreEqual(s,t)assert(type(s)=='table','tablesAreEqual: t1 must be a table, got '..type(s))assert(type(t)=='table','tablesAreEqual: t2 must be a table, got '..type(t))local function u(s,t,v)if#s~=#t then return false end;for w,x in pairs(s)do if type(x)=='table'and type(t[w])=='table'then u(x,t[w])elseif x~=t[w]then return false end end;return v or u(t,s,true)end;return u(s,t)end;function tableHasKey(y,z)assert(type(y)=='table','tableHasKey: table must be a table, got '..type(y))assert(type(z)=='string'or type(z)=='number','tableHasKey: key must be a string or a number, got '..type(z))for w,x in pairs(y)do if w==z then return true,x end end;return false end;function tableHasValue(y,A)assert(type(y)=='table','tableHasValue: table must be a table, got '..type(y))for w,x in pairs(y)do if x==A then return true,w end end;return false end;OSSettings={settingsPath='/.settings',set=function(B,A)assert(type(A)~='nil',"OSSettings.set: value can't be nil, got "..type(A))settings.set(tostring(B),A)return settings.save(OSSettings.settingsPath)end,get=function(B)return settings.get(tostring(B))end,getNames=function()return settings.getNames()end,unset=function(B)settings.unset(tostring(B))return settings.save(OSSettings.settingsPath)end}function setGlobalCallback(C,D)assert(type(D)=='function','setGlobalCallback: callback must be a function, got '..type(D))if C==1 then globalCallbacks.onBClear=D elseif C==2 then globalCallbacks.onSetMonitor=D end end;function bClear()if globalMonitorBuffer.enabled then globalMonitorBuffer.clear()else globalMonitor.clear()globalMonitor.setCursorPos(1,1)end;globalCallbacks.onBClear()if not APLWD.isReceiver and APLWD.cacheWritable then table.insert(APLWD.cache,{type='bClear'})end end;function bClearMonitorGroup()if globalMonitorGroup.enabled then globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)bClear()local E=APLWD.cacheWritable;if APLWD.enabled and E then APLWD.cacheWritable=false end;local F=globalMonitorName;for G,monitorName in pairs(globalMonitorGroup.list)do if monitorName~=F then setMonitor(monitorName)globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)bClear()end end;setMonitor(F)if APLWD.enabled and E then APLWD.cacheWritable=true end else bClear()end end;function setMonitor(H)H=tostring(H)globalCallbacks.onSetMonitor(globalMonitor,globalMonitorName,globalMonitorWidth,globalMonitorHeight)if H=='term'then globalMonitor=term;globalMonitorName='term'globalMonitorWidth,globalMonitorHeight=globalMonitor.getSize()else assert(tostring(peripheral.getType(H))=='monitor','setMonitor: monitorName must be a monitor, got '..tostring(peripheral.getType(H)))local I=peripheral.wrap(H)globalMonitor=I;globalMonitorName=H;globalMonitorWidth,globalMonitorHeight=globalMonitor.getSize()end end;function getMonitorSize()return globalMonitorWidth,globalMonitorHeight end;function setMonitorGroup(J)assert(type(J)=='table','setMonitorGroup: monitorNameList must be a table, got '..type(J))for w,x in pairs(J)do x=tostring(x)if not x=='term'then assert(tostring(peripheral.getType(x))=='monitor','setMonitorGroup: '..x..' must be a monitor, got '..tostring(peripheral.getType(x)))end end;globalMonitorGroup.list=J end;function setMonitorGroupEnabled(K)assert(type(K)=='boolean','setMonitorGroupEnabled: bool must be a boolean, got '..type(K))globalMonitorGroup.enabled=K end;function resetMonitorGroup()globalMonitorGroup.list={}end;APLWD={enabled=false,cacheWritable=true,clearOnDraw=false,protocol='APLWD-'..info.ver,senderName='SendeR',receiverName='ReceiveR',isReceiver=true,myName='',senderID='',modemName='',cache={}}APLWD.enable=function(K)assert(type(K)=='boolean','APLWD.enable: bool must be a boolean, got '..type(K))APLWD.enabled=K end;APLWD.broadcastOnLoopClock=function()globalLoop.APLWDBroadcastOnClock=true end;APLWD.dontBroadcastOnLoopClock=function()globalLoop.APLWDBroadcastOnClock=false end;APLWD.enableClearCacheOnLoopDraw=function(K)assert(type(K)=='boolean','APLWD.enableClearCacheOnLoopDraw: bool must be a boolean, got '..type(K))globalLoop.APLWDClearCacheOnDraw=K end;APLWD.host=function(L,M)if APLWD.enabled then L=tostring(L)if M then M=tostring(M)else M=tostring(os.getComputerID())end;assert(tostring(peripheral.getType(L))=='modem','APLWD.host: modemName must be a modem, got '..tostring(peripheral.getType(L)))rednet.open(L)if rednet.lookup(APLWD.protocol,APLWD.senderName..M)then rednet.close(L)error("APLWD.host: There's already someone connected with hostname: "..M)end;rednet.host(APLWD.protocol,APLWD.senderName..M)APLWD.isReceiver=false;APLWD.myName=APLWD.senderName..M;APLWD.modemName=L end end;APLWD.connect=function(L,N,M)if APLWD.enabled then L=tostring(L)if M then M=tostring(M)else M=tostring(os.getComputerID())end;N=tostring(N)assert(tostring(peripheral.getType(L))=='modem','APLWD.connect: modemName must be a modem, got '..tostring(peripheral.getType(L)))rednet.open(L)if rednet.lookup(APLWD.protocol,APLWD.receiverName..M)then rednet.close(L)error("APLWD.connect: There's already someone connected with hostname: "..M)end;local O=rednet.lookup(APLWD.protocol,APLWD.senderName..N)if not O then rednet.close(L)error("APLWD.connect: Didn't find any sender with name: "..N)end;rednet.host(APLWD.protocol,APLWD.receiverName..M)APLWD.isReceiver=true;APLWD.myName=APLWD.receiverName..M;APLWD.senderID=O;APLWD.modemName=L end end;APLWD.close=function()if APLWD.modemName~=''then if not APLWD.isReceiver then rednet.broadcast('disconnected',APLWD.protocol)end;rednet.unhost(APLWD.protocol,APLWD.myName)rednet.close(APLWD.modemName)APLWD.enable(false)APLWD.clearCache()APLWD.isReceiver=true;APLWD.myName=''APLWD.senderID=''APLWD.modemName=''end end;APLWD.broadcastCache=function()if APLWD.enabled then local P=rednet.isOpen()assert(P,'APLWD.broadcastCache: rednet connection must be opened first, connection '..tostring(P))rednet.broadcast(APLWD.cache,APLWD.protocol)APLWD.clearCache()end end;APLWD.receiveCache=function(Q)if APLWD.enabled then local P=rednet.isOpen()assert(P,'APLWD.receiveCache: rednet connection must be opened first, connection '..tostring(P))local O,R,S=rednet.receive(APLWD.protocol,tonumber(Q))if type(R)=='table'then if O==APLWD.senderID then APLWD.cache=R;return true end elseif R=='disconnected'then APLWD.close()return false,'disconnected'end;return false end end;APLWD.drawCache=function()if APLWD.enabled then local function T()for w,x in pairs(APLWD.cache)do if x.type=='bClear'then bClearMonitorGroup()elseif x.type=='background'then setBackgroundMonitorGroup(x.color)elseif x.type=='text'then local k=globalTextColor;local U=globalBackgroundTextColor;setTextColor(x.colors.textColor)setBackgroundTextColor(x.colors.backgroundTextColor)text(x.pos.x,x.pos.y,x.text,x.colors.transparentBG)setTextColor(k)setBackgroundTextColor(U)elseif x.type=='point'then local V=globalColor;setColor(x.color)point(x.pos.x,x.pos.y)setColor(V)elseif x.type=='rectangle'then local V=globalColor;setColor(x.color)rectangle(x.pos.x1,x.pos.y1,x.pos.x2,x.pos.y2)setColor(V)end end end;if globalMonitorGroup.enabled then if APLWD.clearOnDraw then bClear()end;T()if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()end;local F=globalMonitorName;for G,monitorName in pairs(globalMonitorGroup.list)do if monitorName~=F then setMonitor(monitorName)globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()else T()end end end;setMonitor(F)else if APLWD.clearOnDraw then bClear()end;T()if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()end end;APLWD.clearCache()end end;APLWD.clearCache=function()APLWD.cache={}end;function setColor(W)assert(type(W)=='number','setColor: color must be a number, got '..type(W))globalColor=W end;function setTextColor(W)assert(type(W)=='number','setTextColor: color must be a number, got '..type(W))globalTextColor=W end;function setBackgroundTextColor(W)assert(type(W)=='number','setBackgroundTextColor: color must be a number, got '..type(W))globalBackgroundTextColor=W end;function setBackground(W)assert(type(W)=='number','setBackgroundColor: color must be a number, got '..type(W))if globalMonitorBuffer.enabled then globalMonitor.setBackgroundColor(W)else globalMonitor.setBackgroundColor(W)local E=APLWD.cacheWritable;if APLWD.enabled and E then APLWD.cacheWritable=false end;bClear()if APLWD.enabled and E then APLWD.cacheWritable=true end end;if not APLWD.isReceiver and APLWD.cacheWritable then table.insert(APLWD.cache,{type='background',color=W})end end;function setBackgroundMonitorGroup(W)assert(type(W)=='number','setBackgroundMonitorGroup: color must be a number, got '..type(W))if globalMonitorGroup.enabled then globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)setBackground(W)local E=APLWD.cacheWritable;if APLWD.enabled and E then APLWD.cacheWritable=false end;local F=globalMonitorName;for G,monitorName in pairs(globalMonitorGroup.list)do if monitorName~=F then setMonitor(monitorName)globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)setBackground(W)end end;setMonitor(F)if APLWD.enabled and E then APLWD.cacheWritable=true end else setBackground(W)end end;function setRectangleType(n)assert(type(n)=='number','setRectangleType: type must be a number, got '..type(n))globalRectangleType=n end;function text(X,Y,Z,_)assert(type(X)=='number','Text: x must be a number, got '..type(X))assert(type(Y)=='number','Text: y must be a number, got '..type(Y))Z=tostring(Z)local i,j=globalMonitor.getCursorPos()local k=globalMonitor.getTextColor()local l=globalMonitor.getBackgroundColor()globalMonitor.setTextColor(globalTextColor)globalMonitor.setBackgroundColor(globalBackgroundTextColor)local a0=stringSplit(Z,'\n')for w,x in pairs(a0)do if globalMonitorBuffer.enabled then globalMonitorBuffer.write(X,Y+w-1,x,globalTextColor,globalBackgroundTextColor,_)else globalMonitor.setCursorPos(X,Y+w-1)globalMonitor.write(x)end end;globalMonitor.setCursorPos(i,j)globalMonitor.setTextColor(k)globalMonitor.setBackgroundColor(l)if not APLWD.isReceiver and APLWD.cacheWritable then table.insert(APLWD.cache,{type='text',text=Z,pos={x=X,y=Y},colors={textColor=globalTextColor,backgroundTextColor=globalBackgroundTextColor,transparentBG=_}})end end;function point(X,Y)assert(type(X)=='number','Point: x must be a number, got '..type(X))assert(type(Y)=='number','Point: y must be a number, got '..type(Y))local i,j=globalMonitor.getCursorPos()local l=globalMonitor.getBackgroundColor()globalMonitor.setBackgroundColor(globalColor)if globalMonitorBuffer.enabled then globalMonitorBuffer.write(X,Y,' ',globalColor,globalColor)else globalMonitor.setCursorPos(X,Y)globalMonitor.write(' ')end;globalMonitor.setCursorPos(i,j)globalMonitor.setBackgroundColor(l)if not APLWD.isReceiver and APLWD.cacheWritable then table.insert(APLWD.cache,{type='point',pos={x=X,y=Y},color=globalColor})end end;function rectangle(a1,a2,a3,a4)assert(type(a1)=='number','Point: x1 must be a number, got '..type(a1))assert(type(a2)=='number','Point: y1 must be a number, got '..type(a2))assert(type(a3)=='number','Point: x2 must be a number, got '..type(a3))assert(type(a4)=='number','Point: y2 must be a number, got '..type(a4))local a5=1;local a6=1;if a1>a3 then a5=-1 end;if a2>a4 then a6=-1 end;local E=APLWD.cacheWritable;if APLWD.enabled and E then APLWD.cacheWritable=false end;if globalRectangleType==1 then for a=a1,a3,a5 do for b=a2,a4,a6 do point(a,b)end end elseif globalRectangleType==2 then for a=a1,a3,a5 do point(a,a2)point(a,a4)end;for b=a2,a4,a6 do point(a1,b)point(a3,b)end elseif globalRectangleType==3 then local a7=true;for a=a1,a3,a5 do for b=a2,a4,a6 do if a7 then point(a,b)end;a7=not a7 end;if math.abs(a1-a3)%2~=0 then a7=not a7 end end end;if APLWD.enabled and E then APLWD.cacheWritable=true end;if not APLWD.isReceiver and APLWD.cacheWritable then table.insert(APLWD.cache,{type='rectangle',pos={x1=a1,y1=a2,x2=a3,y2=a4},color=globalColor})end end;function checkAreaPress(a1,a2,a3,a4,a8,a9)assert(type(a1)=='number','checkAreaPress: x1 must be a number, got '..type(a1))assert(type(a2)=='number','checkAreaPress: y1 must be a number, got '..type(a2))assert(type(a3)=='number','checkAreaPress: x2 must be a number, got '..type(a3))assert(type(a4)=='number','checkAreaPress: y2 must be a number, got '..type(a4))assert(type(a8)=='number','checkAreaPress: xPressed must be a number, got '..type(a8))assert(type(a9)=='number','checkAreaPress: yPressed must be a number, got '..type(a9))if a1<a3 then if not(a8>=a1 and a8<=a3)then return false end else if not(a8<=a1 and a8>=a3)then return false end end;if a2<a4 then if not(a9>=a2 and a9<=a4)then return false end else if not(a9<=a2 and a9>=a4)then return false end end;return true end;Clock={}function Clock.new(aa)assert(type(aa)=='number','Clock.new: interval must be a number, got '..type(aa))_newClock={clock=os.clock(),interval=aa,callbacks={onClock=function()end}}setmetatable(_newClock,Clock)return _newClock end;function Clock:setCallback(C,D)assert(type(D)=='function','Clock.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onClock=D end end;function Clock:tick(C)if os.clock()>=self.clock+self.interval then self.clock=os.clock()self.callbacks.onClock(self,C)return true end;return false end;Clock.__index=Clock;Point={}function Point.new(X,Y,W)assert(type(X)=='number','Point.new: x must be a number, got '..type(X))assert(type(Y)=='number','Point.new: y must be a number, got '..type(Y))W=tonumber(W)if not W then W=globalColor end;_newPoint={color=W,hidden=false,pos={x=X,y=Y},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end}}setmetatable(_newPoint,Point)return _newPoint end;function Point:draw()if not self.hidden then self.callbacks.onDraw(self)local V=globalColor;setColor(self.color)point(self.pos.x,self.pos.y)setColor(V)end end;function Point:setCallback(C,D)assert(type(D)=='function','Point.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D end end;function Point:touch(X,Y,C,ab)assert(type(X)=='number','Point.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Point.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then if self.pos.x==X and self.pos.y==Y then self.callbacks.onPress(self,C)return true else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function Point:hide(K)assert(type(K)=='boolean','Point.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Point.__index=Point;Rectangle={}function Rectangle.new(a1,a2,a3,a4,W,n)assert(type(a1)=='number','Rectangle.new: x1 must be a number, got '..type(a1))assert(type(a2)=='number','Rectangle.new: y1 must be a number, got '..type(a2))assert(type(a3)=='number','Rectangle.new: x2 must be a number, got '..type(a3))assert(type(a4)=='number','Rectangle.new: y2 must be a number, got '..type(a4))W=tonumber(W)n=tonumber(n)if not W then W=globalColor end;if not n then n=globalRectangleType end;_newRectangle={color=W,type=n,hidden=false,pos={x1=a1,y1=a2,x2=a3,y2=a4},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end}}setmetatable(_newRectangle,Rectangle)return _newRectangle end;function Rectangle:draw()if not self.hidden then self.callbacks.onDraw(self)local ac=globalRectangleType;local V=globalColor;setRectangleType(self.type)setColor(self.color)rectangle(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2)setRectangleType(ac)setColor(V)end end;function Rectangle:setCallback(C,D)assert(type(D)=='function','Rectangle.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D end end;function Rectangle:touch(X,Y,C,ab)assert(type(X)=='number','Rectangle.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Rectangle.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,X,Y)then self.callbacks.onPress(self,C)return true else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function Rectangle:hide(K)assert(type(K)=='boolean','Rectangle.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Rectangle.__index=Rectangle;Header={}function Header.new(Y,Z,ad,ae,_)assert(type(Y)=='number','Header.new: y must be a number, got '..type(Y))Z=tostring(Z)ad=tonumber(ad)ae=tonumber(ae)if not ad then ad=globalTextColor end;_newHeader={text=Z,hidden=false,pos={x=math.floor((globalMonitorWidth-string.len(Z)+1)/2),y=Y},colors={textColor=ad,backgroundTextColor=ae,transparentBG=_},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end}}setmetatable(_newHeader,Header)return _newHeader end;function Header:draw()if not self.hidden then self.callbacks.onDraw(self)local k=globalTextColor;local U=globalBackgroundTextColor;local af=globalMonitor.getBackgroundColor()setTextColor(self.colors.textColor)if self.colors.backgroundTextColor then setBackgroundTextColor(self.colors.backgroundTextColor)else setBackgroundTextColor(af)end;local a0=stringSplit(self.text,'\n')self.pos.x=math.floor((globalMonitorWidth-string.len(a0[1])+1)/2)text(self.pos.x,self.pos.y,a0[1],self.colors.transparentBG)table.remove(a0,1)for w,x in pairs(a0)do local ag=math.floor((globalMonitorWidth-string.len(x)+1)/2)local ah=self.pos.y+w;text(ag,ah,x)end;setTextColor(k)setBackgroundTextColor(U)end end;function Header:setCallback(C,D)assert(type(D)=='function','Header.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D end end;function Header:touch(X,Y,C,ab)assert(type(X)=='number','Header.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Header.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then self.pos.x=math.floor((globalMonitorWidth-string.len(self.text)+1)/2)local a3=self.pos.x+string.len(self.text)-1;if checkAreaPress(self.pos.x,self.pos.y,a3,self.pos.y,X,Y)then self.callbacks.onPress(self,C)return true else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function Header:hide(K)assert(type(K)=='boolean','Header.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Header.__index=Header;Label={}function Label.new(X,Y,Z,ad,ae,_)assert(type(X)=='number','Label.new: x must be a number, got '..type(X))assert(type(Y)=='number','Label.new: y must be a number, got '..type(Y))Z=tostring(Z)ad=tonumber(ad)ae=tonumber(ae)if not ad then ad=globalTextColor end;_newLabel={text=Z,hidden=false,pos={x=X,y=Y},colors={textColor=ad,backgroundTextColor=ae,transparentBG=_},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end}}setmetatable(_newLabel,Label)return _newLabel end;function Label:draw()if not self.hidden then self.callbacks.onDraw(self)local k=globalTextColor;local U=globalBackgroundTextColor;local af=globalMonitor.getBackgroundColor()setTextColor(self.colors.textColor)if self.colors.backgroundTextColor then setBackgroundTextColor(self.colors.backgroundTextColor)else setBackgroundTextColor(af)end;text(self.pos.x,self.pos.y,self.text,self.colors.transparentBG)setTextColor(k)setBackgroundTextColor(U)end end;function Label:setCallback(C,D)assert(type(D)=='function','Label.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D end end;function Label:touch(X,Y,C,ab)assert(type(X)=='number','Label.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Label.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then local a3=self.pos.x+string.len(self.text)-1;if checkAreaPress(self.pos.x,self.pos.y,a3,self.pos.y,X,Y)then self.callbacks.onPress(self,C)return true else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function Label:hide(K)assert(type(K)=='boolean','Label.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Label.__index=Label;Button={}function Button.new(a1,a2,a3,a4,Z,ad,ae,ai,aj)assert(type(a1)=='number','Button.new: x1 must be a number, got '..type(a1))assert(type(a2)=='number','Button.new: y1 must be a number, got '..type(a2))assert(type(a3)=='number','Button.new: x2 must be a number, got '..type(a3))assert(type(a4)=='number','Button.new: y2 must be a number, got '..type(a4))Z=tostring(Z)ad=tonumber(ad)ae=tonumber(ae)ai=tonumber(ai)aj=tonumber(aj)if not ad then ad=globalTextColor end;if not ai then ai=globalColor end;if not aj then aj=globalColor end;_newButton={text=Z,state=false,hidden=false,pos={x1=a1,y1=a2,x2=a3,y2=a4},colors={textColor=ad,backgroundTextColor=ae,pressedButtonColor=ai,notPressedButtonColor=aj},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end}}setmetatable(_newButton,Button)return _newButton end;function Button:draw()if not self.hidden then self.callbacks.onDraw(self)local ac=globalRectangleType;local V=globalColor;local k=globalTextColor;local U=globalBackgroundTextColor;setRectangleType(rectangleTypes.filled)if self.state then setColor(self.colors.pressedButtonColor)if self.colors.backgroundTextColor then setBackgroundTextColor(self.colors.backgroundTextColor)else setBackgroundTextColor(self.colors.pressedButtonColor)end else setColor(self.colors.notPressedButtonColor)if self.colors.backgroundTextColor then setBackgroundTextColor(self.colors.backgroundTextColor)else setBackgroundTextColor(self.colors.notPressedButtonColor)end end;setTextColor(self.colors.textColor)rectangle(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2)local ak=self.pos.x1+math.floor((self.pos.x2-self.pos.x1-string.len(self.text)+1)/2)local al=self.pos.y1+math.floor((self.pos.y2-self.pos.y1)/2)text(ak,al,self.text)setRectangleType(ac)setColor(V)setTextColor(k)setBackgroundTextColor(U)end end;function Button:setCallback(C,D)assert(type(D)=='function','Button.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D end end;function Button:touch(X,Y,C,ab)assert(type(X)=='number','Button.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Button.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,X,Y)then self.state=not self.state;self.callbacks.onPress(self,C)return true else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function Button:hide(K)assert(type(K)=='boolean','Button.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Button.__index=Button;Menu={}function Menu.new(a1,a2,a3,a4,W)assert(type(a1)=='number','Menu.new: x1 must be a number, got '..type(a1))assert(type(a2)=='number','Menu.new: y1 must be a number, got '..type(a2))assert(type(a3)=='number','Menu.new: x2 must be a number, got '..type(a3))assert(type(a4)=='number','Menu.new: y2 must be a number, got '..type(a4))W=tonumber(W)if not W then W=globalColor end;_newMenu={color=W,objs={},hidden=true,pos={x1=a1,y1=a2,x2=a3,y2=a4},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end,onButtonPress=function()end,onFailedButtonPress=function()end}}setmetatable(_newMenu,Menu)return _newMenu end;function Menu:draw()if not self.hidden then self.callbacks.onDraw(self)local ac=globalRectangleType;local V=globalColor;setColor(self.color)rectangle(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2)for am=#self.objs,1,-1 do local an=self.objs[am]an:draw()end;setColor(V)end end;function Menu:setCallback(C,D)assert(type(D)=='function','Menu.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D elseif C==4 then self.callbacks.onButtonPress=D elseif C==5 then self.callbacks.onFailedButtonPress=D end end;function Menu:set(y,ao)for w,an in pairs(y)do assert(getmetatable(an)==Button,'Menu.set: you can only attach buttons to menus.')end;local ap=math.abs(self.pos.x2-self.pos.x1)+1;local aq=math.abs(self.pos.y2-self.pos.y1)+1;for am=aq+1,#y do table.remove(y,aq+1)end;local ar=math.floor(aq/#y)local as=math.min(self.pos.x1,self.pos.x2)local at=math.max(self.pos.x1,self.pos.x2)local au=math.min(self.pos.y1,self.pos.y2)local av=math.max(self.pos.y1,self.pos.y2)for w,an in pairs(y)do an.pos.x1=as;an.pos.x2=at;if ao then an.pos.y1=au+(w-1)*ar;an.pos.y2=au+(w-1)*ar+ar-1 else an.pos.y1=au+w-1;an.pos.y2=au+w-1 end;an.text=string.sub(an.text,0,ap)table.insert(self.objs,an)end end;function Menu:touch(X,Y,C,ab)assert(type(X)=='number','Menu.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Menu.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,X,Y)then self.callbacks.onPress(self,C)local aw=false;for w,an in pairs(self.objs)do if an:touch(X,Y,C,aw)then self.callbacks.onButtonPress(self,an,C)aw=true else self.callbacks.onFailedButtonPress(self,an,C)end end;return aw else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function Menu:hide(K)assert(type(K)=='boolean','Menu.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Menu.__index=Menu;PercentageBar={}function PercentageBar.new(a1,a2,a3,a4,A,ax,ay,az,aA,aB,aC,aD)assert(type(a1)=='number','PercentageBar.new: x1 must be a number, got '..type(a1))assert(type(a2)=='number','PercentageBar.new: y1 must be a number, got '..type(a2))assert(type(a3)=='number','PercentageBar.new: x2 must be a number, got '..type(a3))assert(type(a4)=='number','PercentageBar.new: y2 must be a number, got '..type(a4))assert(type(A)=='number','PercentageBar.new: value must be a number, got '..type(A))assert(type(ax)=='number','PercentageBar.new: min must be a number, got '..type(ax))assert(type(ay)=='number','PercentageBar.new: max must be a number, got '..type(ay))aA=tonumber(aA)aB=tonumber(aB)aC=tonumber(aC)aD=tonumber(aD)if not aA then aA=globalTextColor end;if not aC then aC=globalColor end;_newPercentageBar={hidden=false,value={draw=az,drawOnPB=true,percentage=nil,current=nil,max=ay,min=ax},pos={x1=a1,y1=a2,x2=a3,y2=a4},colors={valueColor=aA,backgroundValueColor=aB,barColor=aC,backgroundBarColor=aD},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end}}PercentageBar.setValue(_newPercentageBar,A)setmetatable(_newPercentageBar,PercentageBar)return _newPercentageBar end;function PercentageBar:draw()if not self.hidden then self.callbacks.onDraw(self)local ac=globalRectangleType;local V=globalColor;local k=globalTextColor;local U=globalBackgroundTextColor;local af=globalMonitor.getBackgroundColor()setRectangleType(rectangleTypes.filled)local aE=self.pos.x1+(self.pos.x2-self.pos.x1)*self.value.percentage/100;if self.colors.backgroundBarColor then setColor(self.colors.backgroundBarColor)rectangle(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2)if self.value.percentage>0 then setColor(self.colors.barColor)rectangle(self.pos.x1,self.pos.y1,aE,self.pos.y2)end else if self.value.percentage>0 then setColor(self.colors.barColor)rectangle(self.pos.x1,self.pos.y1,aE,self.pos.y2)end end;if self.value.draw then local aF=self.value.percentage..'%'local aG=self.pos.x1+math.floor((self.pos.x2-self.pos.x1-string.len(aF)+1)/2)local aH;if self.value.drawOnPB then aH=self.pos.y1+math.floor((self.pos.y2-self.pos.y1)/2)else if self.pos.y1>self.pos.y2 then aH=self.pos.y1+1 else aH=self.pos.y2+1 end end;setTextColor(self.colors.valueColor)if self.colors.backgroundValueColor then setBackgroundTextColor(self.colors.backgroundValueColor)text(aG,aH,aF)else if self.value.drawOnPB then if self.colors.backgroundBarColor then setBackgroundTextColor(self.colors.backgroundBarColor)else setBackgroundTextColor(af)end;if self.pos.x1<self.pos.x2 then local aI=math.floor(aE)-aG+1;if aI<0 then aI=0 elseif aI>string.len(aF)then aI=string.len(aF)end;if aI<string.len(aF)then text(aG,aH,aF)end;if aI>0 then setBackgroundTextColor(self.colors.barColor)text(aG,aH,string.sub(aF,1,aI))end else local aI=aG+string.len(aF)-math.ceil(aE)if aI<0 then aI=0 elseif aI>string.len(aF)then aI=string.len(aF)end;if aI<string.len(aF)then text(aG,aH,aF)end;if aI>0 then setBackgroundTextColor(self.colors.barColor)text(aG+string.len(aF)-aI,aH,string.sub(aF,-aI))end end else setBackgroundTextColor(af)text(aG,aH,self.value.percentage..'%')end end end;setRectangleType(ac)setColor(V)setTextColor(k)setBackgroundTextColor(U)end end;function PercentageBar:setCallback(C,D)assert(type(D)=='function','PercentageBar.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D end end;function PercentageBar:setValue(A)assert(type(A)=='number','PercentageBar.setValue: value must be a number, got '..type(A))if A<self.value.min then A=self.value.min end;if A>self.value.max then A=self.value.max end;self.value.current=A;self.value.percentage=math.floor((self.value.current-self.value.min)/(self.value.max-self.value.min)*100)end;function PercentageBar:touch(X,Y,C,ab)assert(type(X)=='number','PercentageBar.touch: x must be a number, got '..type(X))assert(type(Y)=='number','PercentageBar.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,X,Y)then self.callbacks.onPress(self,C)return true else self.callbacks.onFailedPress(self,C)return false end else self.callbacks.onFailedPress(self,C)end end;return false end;function PercentageBar:hide(K)assert(type(K)=='boolean','PercentageBar.hide: bool must be a boolean, got '..type(K))self.hidden=K end;PercentageBar.__index=PercentageBar;Memo={}function Memo.new(a1,a2,a3,a4,ad,ae,W,aJ)assert(type(a1)=='number','Memo.new: x1 must be a number, got '..type(a1))assert(type(a2)=='number','Memo.new: y1 must be a number, got '..type(a2))assert(type(a3)=='number','Memo.new: x2 must be a number, got '..type(a3))assert(type(a4)=='number','Memo.new: y2 must be a number, got '..type(a4))ad=tonumber(ad)ae=tonumber(ae)W=tonumber(W)aJ=tonumber(aJ)if not ad then ad=globalTextColor end;if not W then W=globalColor end;if not ae then ae=W end;if not aJ then aJ=colors.white end;_newMemo={active=false,hidden=false,selfLoop=false,lines={},pos={x1=a1,y1=a2,x2=a3,y2=a4},editSettings={editable=true,charEvent=true,keyEvent=true},cursor={text=' ',colors={textColor=ad,backgroundTextColor=aJ},visible=false,blink={automatic=true,enabled=false,clock=os.clock(),speed=0.5},pos={char=1,line=1},limits={enabled=true,char=math.abs(a3-a1)+1,line=math.abs(a4-a2)+1}},colors={textColor=ad,backgroundTextColor=ae,color=W},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end,onEdit=function()end,onCursorBlink=function()end,onActivated=function()end,onDeactivated=function()end}}setmetatable(_newMemo,Memo)return _newMemo end;function Memo:draw()if not self.hidden then self.callbacks.onDraw(self)local ac=globalRectangleType;local V=globalColor;local k=globalTextColor;local U=globalBackgroundTextColor;local af=globalMonitor.getBackgroundColor()local aK=math.min(self.pos.x1,self.pos.x2)local aL=math.max(self.pos.x1,self.pos.x2)local aM=math.min(self.pos.y1,self.pos.y2)local aN=math.max(self.pos.y1,self.pos.y2)setRectangleType(rectangleTypes.filled)setColor(self.colors.color)setTextColor(self.colors.textColor)setBackgroundTextColor(self.colors.backgroundTextColor)rectangle(aK,aM,aL,aN)local aO=aL-aK;local aP=aN-aM;local aQ={x=self.cursor.pos.char-1,y=self.cursor.pos.line-1}if aQ.x>aO then aQ.x=aO elseif aQ.x<0 then aQ.x=0 end;if aQ.y>aP then aQ.y=aP elseif aQ.y<0 then aQ.y=0 end;for am=0,math.abs(aN-aM)do if self.cursor.pos.line-1<=aP then if self.lines[am+1]then if self.cursor.pos.char-1<=aO then text(aK,aM+am,string.sub(self.lines[am+1],1,aO+1))else text(aK,aM+am,string.sub(self.lines[am+1],self.cursor.pos.char-aO,self.cursor.pos.char))end end else if self.lines[am+self.cursor.pos.line-aP]then if self.cursor.pos.char-1<=aO then text(aK,aM+am,string.sub(self.lines[am+self.cursor.pos.line-aP],1,aO+1))else text(aK,aM+am,string.sub(self.lines[am+self.cursor.pos.line-aP],self.cursor.pos.char-aO,self.cursor.pos.char))end end end end;if self.cursor.visible then setTextColor(self.cursor.colors.textColor)setBackgroundTextColor(self.cursor.colors.backgroundTextColor)text(aK+aQ.x,aM+aQ.y,self.cursor.text)end;setRectangleType(ac)setColor(V)setTextColor(k)setBackgroundTextColor(U)end end;function Memo:setCallback(C,D)assert(type(D)=='function','Memo.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D elseif C==4 then self.callbacks.onEdit=D elseif C==5 then self.callbacks.onCursorBlink=D elseif C==6 then self.callbacks.onActivated=D elseif C==7 then self.callbacks.onDeactivated=D end end;function Memo:setCursorLimits(aR,aS)assert(type(aR)=='number'or type(aR)=='nil','Memo.setCursorLimits: char must be a number or nil, got '..type(aR))assert(type(aS)=='number'or type(aS)=='nil','Memo.setCursorLimits: line must be a number or nil, got '..type(aS))self.cursor.limits.char=aR;self.cursor.limits.line=aS end;function Memo:setCursorPos(aR,aS,aT)assert(type(aR)=='number','Memo.setCursorPos: char must be a number, got '..type(aR))assert(type(aS)=='number','Memo.setCursorPos: line must be a number, got '..type(aS))if aR<1 then aR=1 end;if aS<1 then aS=1 end;if self.cursor.limits.enabled then if self.cursor.limits.char then if aR>self.cursor.limits.char+1 then aR=self.cursor.limits.char end end;if self.cursor.limits.line then if aS>self.cursor.limits.line then aS=self.cursor.limits.line end end end;if not self.lines[aS]then if aT then for am=#self.lines+1,aS do table.insert(self.lines,'')end else if#self.lines>0 then aS=#self.lines else aS=1 end end end;if self.lines[aS]then if aR>#self.lines[aS]+1 then aR=#self.lines[aS]+1 end else aR=1 end;self.cursor.pos.char=aR;self.cursor.pos.line=aS end;function Memo:edit(C)if not self.editSettings.editable then return end;if not self.hidden then local function aU(event)if not event then return false end;if not self.lines[1]then self:setCursorPos(1,1,true)end;self.callbacks.onEdit(self,event)if self.cursor.limits.enabled then if self.cursor.limits.line then if#self.lines>self.cursor.limits.line then for am=self.cursor.limits.line+1,#self.lines+1 do table.remove(self.lines,self.cursor.limits.line)end end end;for w,x in pairs(self.lines)do if self.cursor.limits.char then if#x>self.cursor.limits.char then self.lines[w]=x:sub(1,self.cursor.limits.char)end end end end;if event[1]=='monitor_touch'and(event[2]==globalMonitorName or globalMonitorGroup.enabled and tableHasValue(globalMonitorGroup.list,event[2]))then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,event[3],event[4])then return true else return false end elseif event[1]=='mouse_click'and(globalMonitorName=='term'or globalMonitorGroup.enabled and tableHasValue(globalMonitorGroup.list,'term'))then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,event[3],event[4])then return true else return false end elseif event[1]=='char'and self.editSettings.charEvent then local aV=self.lines[self.cursor.pos.line]if self.cursor.limits.enabled then if self.cursor.limits.char then if self.cursor.pos.char<=self.cursor.limits.char then self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)..event[2]..aV:sub(self.cursor.pos.char,#aV)self.cursor.pos.char=self.cursor.pos.char+1 end else self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)..event[2]..aV:sub(self.cursor.pos.char,#aV)self.cursor.pos.char=self.cursor.pos.char+1 end else self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)..event[2]..aV:sub(self.cursor.pos.char,#aV)self.cursor.pos.char=self.cursor.pos.char+1 end elseif event[1]=='key'and self.editSettings.keyEvent then local aV=self.lines[self.cursor.pos.line]if event[2]==28 then if self.cursor.limits.enabled then if self.cursor.limits.line then if#self.lines+1<=self.cursor.limits.line then table.insert(self.lines,self.cursor.pos.line+1,'')self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)self.lines[self.cursor.pos.line+1]=aV:sub(self.cursor.pos.char,#aV)..self.lines[self.cursor.pos.line+1]self.cursor.pos.line=self.cursor.pos.line+1;self.cursor.pos.char=1 end else table.insert(self.lines,self.cursor.pos.line+1,'')self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)self.lines[self.cursor.pos.line+1]=aV:sub(self.cursor.pos.char,#aV)..self.lines[self.cursor.pos.line+1]self.cursor.pos.line=self.cursor.pos.line+1;self.cursor.pos.char=1 end else table.insert(self.lines,self.cursor.pos.line+1,'')self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)self.lines[self.cursor.pos.line+1]=aV:sub(self.cursor.pos.char,#aV)..self.lines[self.cursor.pos.line+1]self.cursor.pos.line=self.cursor.pos.line+1;self.cursor.pos.char=1 end elseif event[2]==14 then if self.cursor.pos.char>1 then self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-2)..aV:sub(self.cursor.pos.char,#aV)self.cursor.pos.char=self.cursor.pos.char-1 elseif self.cursor.pos.line>1 then local aW=#self.lines[self.cursor.pos.line-1]if self.cursor.limits.enabled then if self.cursor.limits.char then if aW+#aV<=self.cursor.limits.char then self.lines[self.cursor.pos.line-1]=self.lines[self.cursor.pos.line-1]..aV:sub(self.cursor.pos.char,#aV)table.remove(self.lines,self.cursor.pos.line)self.cursor.pos.line=self.cursor.pos.line-1;self.cursor.pos.char=aW+1 end else self.lines[self.cursor.pos.line-1]=self.lines[self.cursor.pos.line-1]..aV:sub(self.cursor.pos.char,#aV)table.remove(self.lines,self.cursor.pos.line)self.cursor.pos.line=self.cursor.pos.line-1;self.cursor.pos.char=aW+1 end else self.lines[self.cursor.pos.line-1]=self.lines[self.cursor.pos.line-1]..aV:sub(self.cursor.pos.char,#aV)table.remove(self.lines,self.cursor.pos.line)self.cursor.pos.line=self.cursor.pos.line-1;self.cursor.pos.char=aW+1 end end elseif event[2]==211 then if self.cursor.pos.char>#aV then if self.lines[self.cursor.pos.line+1]then if self.cursor.limits.enabled then if self.cursor.limits.char then if#self.lines[self.cursor.pos.line+1]+#aV<=self.cursor.limits.char then self.lines[self.cursor.pos.line]=aV..self.lines[self.cursor.pos.line+1]table.remove(self.lines,self.cursor.pos.line+1)end else self.lines[self.cursor.pos.line]=aV..self.lines[self.cursor.pos.line+1]table.remove(self.lines,self.cursor.pos.line+1)end else self.lines[self.cursor.pos.line]=aV..self.lines[self.cursor.pos.line+1]table.remove(self.lines,self.cursor.pos.line+1)end end else self.lines[self.cursor.pos.line]=aV:sub(0,self.cursor.pos.char-1)..aV:sub(self.cursor.pos.char+1,#aV)end elseif event[2]==203 then if self.cursor.pos.char>1 then self.cursor.pos.char=self.cursor.pos.char-1 else if self.cursor.pos.line>1 then self.cursor.pos.line=self.cursor.pos.line-1;self.cursor.pos.char=#self.lines[self.cursor.pos.line]+1 end end elseif event[2]==205 then if self.cursor.pos.char<=#aV then if self.cursor.limits.enabled then if self.cursor.limits.char then if self.cursor.pos.char<=self.cursor.limits.char then self.cursor.pos.char=self.cursor.pos.char+1 end else self.cursor.pos.char=self.cursor.pos.char+1 end else self.cursor.pos.char=self.cursor.pos.char+1 end else if self.lines[self.cursor.pos.line+1]then if self.cursor.limits.enabled then if self.cursor.limits.line then if self.cursor.pos.line<self.cursor.limits.line then self.cursor.pos.line=self.cursor.pos.line+1;self.cursor.pos.char=1 end else self.cursor.pos.line=self.cursor.pos.line+1;self.cursor.pos.char=1 end else self.cursor.pos.line=self.cursor.pos.line+1;self.cursor.pos.char=1 end end end elseif event[2]==200 then if self.cursor.pos.line>1 then self.cursor.pos.line=self.cursor.pos.line-1;if self.cursor.pos.char-1>#self.lines[self.cursor.pos.line]then self.cursor.pos.char=#self.lines[self.cursor.pos.line]+1 end end elseif event[2]==208 then if self.lines[self.cursor.pos.line+1]then if self.cursor.limits.enabled then if self.cursor.limits.line then if self.cursor.pos.line<self.cursor.limits.line then self.cursor.pos.line=self.cursor.pos.line+1;if self.cursor.pos.char-1>#self.lines[self.cursor.pos.line]then self.cursor.pos.char=#self.lines[self.cursor.pos.line]+1 end end else self.cursor.pos.line=self.cursor.pos.line+1;if self.cursor.pos.char-1>#self.lines[self.cursor.pos.line]then self.cursor.pos.char=#self.lines[self.cursor.pos.line]+1 end end else self.cursor.pos.line=self.cursor.pos.line+1;if self.cursor.pos.char-1>#self.lines[self.cursor.pos.line]then self.cursor.pos.char=#self.lines[self.cursor.pos.line]+1 end end end end end;return true end;if not self.selfLoop then aU(C)else self.active=true;while self.active do local aX=os.startTimer(self.cursor.blink.speed/2)C={os.pullEvent()}if not aU(C)then break end;self:draw()if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()end;if self.cursor.blink.enabled then if os.clock()>=self.cursor.blink.clock+self.cursor.blink.speed then self.cursor.blink.clock=os.clock()self.callbacks.onCursorBlink(self,C)self.cursor.visible=not self.cursor.visible end end;os.cancelTimer(aX)end end end end;function Memo:touch(X,Y,C,ab)assert(type(X)=='number','Memo.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Memo.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab and checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,X,Y)then self.callbacks.onPress(self,C)self.active=true;self.callbacks.onActivated(self,C)if self.selfLoop then self.cursor.blink.enabled=true;self.cursor.visible=true;self:edit(C)self.active=false;self.callbacks.onDeactivated(self,C)self.cursor.blink.enabled=false;self.cursor.visible=false elseif self.editSettings.editable and self.cursor.blink.automatic then self.cursor.blink.enabled=true;self.cursor.visible=true end;return true else self.callbacks.onFailedPress(self,C)if self.active then self.active=false;self.callbacks.onDeactivated(self,C)if self.editSettings.editable and self.cursor.blink.automatic then self.cursor.blink.enabled=false;self.cursor.visible=false end end;return false end end;if self.active then self.active=false;self.callbacks.onDeactivated(self,C)end;return false end;function Memo:tick(C)if not self.hidden then if not self.selfLoop then if self.cursor.blink.enabled then if os.clock()>=self.cursor.blink.clock+self.cursor.blink.speed then self.cursor.blink.clock=os.clock()self.callbacks.onCursorBlink(self,C)self.cursor.visible=not self.cursor.visible end end end end end;function Memo:key(C)if not self.hidden then if not self.selfLoop then if self.active then self:edit(C)end end end end;function Memo:char(C)if not self.hidden then if not self.selfLoop then if self.active then self:edit(C)end end end end;function Memo:write(o)if not o then o=''end;o=tostring(o)if not self.lines[1]then self:setCursorPos(1,1,true)end;self.callbacks.onEdit(self,{'write',o})local a0=stringSplit(o,'\n')for w,x in pairs(a0)do if w~=1 then if self.lines[self.cursor.pos.line+1]then self:setCursorPos(#self.lines[self.cursor.pos.line+1],self.cursor.pos.line+1)else self:setCursorPos(1,self.cursor.pos.line+1,true)end end;local aV=self.lines[self.cursor.pos.line]aV=aV:sub(0,self.cursor.pos.char-1)..x..aV:sub(self.cursor.pos.char,#aV)self.lines[self.cursor.pos.line]=aV;self:setCursorPos(self.cursor.pos.char+#x,self.cursor.pos.line)if self.cursor.limits.enabled then if self.cursor.limits.char then if#aV>self.cursor.limits.char then aV=aV:sub(1,self.cursor.limits.char)end end end;self.lines[self.cursor.pos.line]=aV end end;function Memo:print(o)if not o then o=''end;o=tostring(o)self:write(o..'\n')end;function Memo:clear()self.cursor.pos.char=1;self.cursor.pos.line=1;self.lines={}end;function Memo:enableSelfLoop(K)assert(type(K)=='boolean','Memo.enableSelfLoop: bool must be a boolean, got '..type(K))self.selfLoop=K end;function Memo:limits(K)assert(type(K)=='boolean','Memo.limits: bool must be a boolean, got '..type(K))self.cursor.limits.enabled=K end;function Memo:editable(K)assert(type(K)=='boolean','Memo.editable: bool must be a boolean, got '..type(K))self.editSettings.editable=K end;function Memo:hide(K)assert(type(K)=='boolean','Memo.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Memo.__index=Memo;Window={}function Window.new(a1,a2,a3,a4,W)assert(type(a1)=='number','Window.new: x1 must be a number, got '..type(a1))assert(type(a2)=='number','Window.new: y1 must be a number, got '..type(a2))assert(type(a3)=='number','Window.new: x2 must be a number, got '..type(a3))assert(type(a4)=='number','Window.new: y2 must be a number, got '..type(a4))W=tonumber(W)if not W then W=term.getBackgroundColor()end;_newWindow={active=false,hidden=false,color=W,grabbedFrom={x=1,y=1},shadow={enabled=false,color=colors.black,offset={x=1,y=1}},objs={list={},events={draw={},touch={},tick={},key={},char={},mouse_drag={}}},pos={x1=a1,y1=a2,x2=a3,y2=a4},callbacks={onDraw=function()end,onPress=function()end,onFailedPress=function()end,onOBJPress=function()end,onFailedOBJPress=function()end,onEvent=function()end}}setmetatable(_newWindow,Window)return _newWindow end;function Window:draw()if not self.hidden then self.callbacks.onDraw(self)local ac=globalRectangleType;local V=globalColor;setRectangleType(rectangleTypes.filled)if self.shadow.enabled then setColor(self.shadow.color)local aY=self.shadow.offset.x;local aZ=self.shadow.offset.y;local a_=self.pos.x1+aY;local b0=self.pos.x2+aY;local b1=self.pos.y1+aZ;local b2=self.pos.y2+aZ;rectangle(a_,b1,b0,b2)end;setColor(self.color)rectangle(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2)setRectangleType(ac)setColor(V)for G,an in pairs(self.objs.events.draw)do an:draw()end end end;function Window:setCallback(C,D)assert(type(D)=='function','Window.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onPress=D elseif C==3 then self.callbacks.onFailedPress=D elseif C==4 then self.callbacks.onOBJPress=D elseif C==5 then self.callbacks.onFailedOBJPress=D elseif C==6 then self.callbacks.onEvent=D end end;function Window:set(b3)assert(type(b3)=='table','Window.set: objGroup must be a table, got '..type(b3))self.objs.list=b3;self.objs.events=getOBJSEvents(b3)end;function Window:touch(X,Y,C,ab)assert(type(X)=='number','Window.touch: x must be a number, got '..type(X))assert(type(Y)=='number','Window.touch: y must be a number, got '..type(Y))if not self.hidden then self.callbacks.onEvent(self,C)if not ab then if checkAreaPress(self.pos.x1,self.pos.y1,self.pos.x2,self.pos.y2,X,Y)then self.active=true;self.grabbedFrom.x=X;self.grabbedFrom.y=Y;self.callbacks.onPress(self,C)local aw=false;for G,an in pairs(self.objs.events.touch)do if an:touch(X,Y,C,aw)then self.callbacks.onOBJPress(self,an,C)aw=true else self.callbacks.onFailedOBJPress(self,an,C)end end;return true else self.active=false;self.callbacks.onFailedPress(self,C)return false end else self.active=false;self.callbacks.onFailedPress(self,C)end end;return false end;function Window:mouse_drag(C)if not self.hidden then self.callbacks.onEvent(self,C)if self.active then local b4=C[3]-self.grabbedFrom.x;local b5=C[4]-self.grabbedFrom.y;self.grabbedFrom.x=C[3]self.grabbedFrom.y=C[4]self.pos.x1=self.pos.x1+b4;self.pos.x2=self.pos.x2+b4;self.pos.y1=self.pos.y1+b5;self.pos.y2=self.pos.y2+b5;for G,an in pairs(self.objs.list)do if an.pos.x then an.pos.x=an.pos.x+b4 end;if an.pos.x1 then an.pos.x1=an.pos.x1+b4 end;if an.pos.x2 then an.pos.x2=an.pos.x2+b4 end;if an.pos.y then an.pos.y=an.pos.y+b5 end;if an.pos.y1 then an.pos.y1=an.pos.y1+b5 end;if an.pos.y2 then an.pos.y2=an.pos.y2+b5 end end end end end;function Window:tick(C)if not self.hidden then self.callbacks.onEvent(self,C)for w,an in pairs(self.objs.events.tick)do an:tick(C)end end end;function Window:key(C)if not self.hidden then self.callbacks.onEvent(self,C)for w,an in pairs(self.objs.events.key)do an:key(C)end end end;function Window:char(C)if not self.hidden then self.callbacks.onEvent(self,C)for w,an in pairs(self.objs.events.char)do an:char(C)end end end;function Window:hide(K)assert(type(K)=='boolean','Window.hide: bool must be a boolean, got '..type(K))self.hidden=K end;Window.__index=Window;OBJGroup={}function OBJGroup.new()_newOBJGroup={objs={list={},events={draw={},touch={},tick={},key={},char={},mouse_drag={}}},hidden=false,callbacks={onDraw=function()end,onOBJPress=function()end,onFailedOBJPress=function()end}}setmetatable(_newOBJGroup,OBJGroup)return _newOBJGroup end;function OBJGroup:draw()if not self.hidden then self.callbacks.onDraw(self)for G,an in pairs(self.objs.events.draw)do an:draw()end end end;function OBJGroup:setCallback(C,D)assert(type(D)=='function','OBJGroup.setCallback: callback must be a function, got '..type(D))if C==1 then self.callbacks.onDraw=D elseif C==2 then self.callbacks.onOBJPress=D elseif C==3 then self.callbacks.onFailedOBJPress=D end end;function OBJGroup:set(b3)assert(type(b3)=='table','OBJGroup.set: objGroup must be a table, got '..type(b3))self.objs.list=b3;self.objs.events=getOBJSEvents(b3)end;function OBJGroup:touch(X,Y,C,ab)assert(type(X)=='number','OBJGroup.touch: x must be a number, got '..type(X))assert(type(Y)=='number','OBJGroup.touch: y must be a number, got '..type(Y))if not self.hidden then if not ab then local aw=false;for G,an in pairs(self.objs.list)do if an:touch(X,Y,C,aw)then self.callbacks.onOBJPress(self,an,C)aw=true else self.callbacks.onFailedOBJPress(self,an,C)end end;return aw end end;return false end;function OBJGroup:tick(C)if not self.hidden then for w,an in pairs(self.objs.events.tick)do an:tick(C)end end end;function OBJGroup:key(C)if not self.hidden then for w,an in pairs(self.objs.events.key)do an:key(C)end end end;function OBJGroup:char(C)if not self.hidden then for w,an in pairs(self.objs.events.char)do an:char(C)end end end;function OBJGroup:mouse_drag(C)if not self.hidden then for w,an in pairs(self.objs.events.mouse_drag)do an:mouse_drag(C)end end end;function OBJGroup:hide(K)assert(type(K)=='boolean','OBJGroup.hide: bool must be a boolean, got '..type(K))self.hidden=K end;OBJGroup.__index=OBJGroup;globalLoop.stats.FPS=Label.new(0,0,'0FPS',nil,nil,true)globalLoop.stats.EPS=Label.new(0,0,'0EPS',nil,nil,true)globalLoop.stats.FPS.hidden=true;globalLoop.stats.EPS.hidden=true;table.insert(globalLoop.group.LIBPrivate.objs,globalLoop.stats.FPS)table.insert(globalLoop.group.LIBPrivate.objs,globalLoop.stats.EPS)function drawOnLoopClock()globalLoop.drawOnClock=true end;function drawOnLoopEvent()globalLoop.drawOnClock=false end;function drawLoopStats(K)assert(type(K)=='boolean','enableLoopStats: bool must be a boolean, got '..type(K))if K and globalLoop.stats.automaticPos then local b6=globalLoop.stats.automaticPosOffset.x;local b7=globalLoop.stats.automaticPosOffset.y;globalLoop.stats.FPS.pos.x=globalMonitorWidth-#globalLoop.stats.FPS.text+1+b6;globalLoop.stats.FPS.pos.y=globalMonitorHeight-1+b7;globalLoop.stats.EPS.pos.x=globalMonitorWidth-#globalLoop.stats.EPS.text+1+b6;globalLoop.stats.EPS.pos.y=globalMonitorHeight+b7 end;globalLoop.stats.FPS.hidden=not K;globalLoop.stats.EPS.hidden=not K end;function setLoopClockSpeed(b8)assert(type(b8)=='number','setLoopClockSpeed: sec must be a number, got '..type(b8))globalLoop.clockSpeed=b8 end;function setLoopTimerSpeed(b8)assert(type(b8)=='number','setLoopTimerSpeed: sec must be a number, got '..type(b8))globalLoop.timerSpeed=b8 end;function setLoopCallback(C,D)assert(type(D)=='function','setLoopCallback: callback must be a function, got '..type(D))if C==1 then globalLoop.callbacks.onInit=D elseif C==2 then globalLoop.callbacks.onStop=D elseif C==3 then globalLoop.callbacks.onClock=D elseif C==4 then globalLoop.callbacks.onEvent=D elseif C==5 then globalLoop.callbacks.onTimer=D elseif C==6 then globalLoop.callbacks.onMonitorChange=D end end;function loopAutoClear(K)assert(type(K)=='boolean','loopAutoClear: bool must be a boolean, got '..type(K))globalLoop.autoClear=K end;function addLoopGroup(b9,ba)b9=tostring(b9)assert(b9~='LIBPrivate'or b9~='none',"addLoopGroup: can't overwrite Lib's Private groups")assert(type(ba)=='table','addLoopGroup: group must be a table, got '..type(ba))globalLoop.group[b9]={callbacks={onClock=function()end,onEvent=function()end,onTimer=function()end,onMonitorChange=function()end,onSet=function()end,onUnset=function()end},objs=ba}end;function removeLoopGroup(b9)b9=tostring(b9)assert(b9~='LIBPrivate'or b9~='none',"removeLoopGroup: can't remove Lib's Private groups")globalLoop.group[b9]=nil end;function setLoopGroup(b9)b9=tostring(b9)assert(globalLoop.group[b9],'setLoopGroup: groupName must be a valid group.')local bb=globalLoop.group[globalLoop.selectedGroup]local bc=globalLoop.group[b9]bb.callbacks.onUnset(bb,bc)globalLoop.selectedGroup=b9;bc.callbacks.onSet(bc,bb)globalLoop.wasGroupChanged=true end;function setLoopGroupCallback(b9,C,D)b9=tostring(b9)assert(b9~='LIBPrivate'or b9~='none',"setLoopGroupCallback: can't overwrite Lib's Private groups' callbacks")assert(globalLoop.group[b9],'setLoopGroupCallback: groupName must be a valid group.')assert(type(D)=='function','setLoopGroupCallback: callback must be a function, got '..type(D))if C==1 then globalLoop.group[b9].callbacks.onClock=D elseif C==2 then globalLoop.group[b9].callbacks.onEvent=D elseif C==3 then globalLoop.group[b9].callbacks.onTimer=D elseif C==4 then globalLoop.group[b9].callbacks.onMonitorChange=D elseif C==5 then globalLoop.group[b9].callbacks.onSet=D elseif C==6 then globalLoop.group[b9].callbacks.onUnset=D end end;function resetLoopSettings()globalLoop.APLWDBroadcastOnClock=false;globalLoop.APLWDClearCacheOnDraw=true;globalLoop.stats.FPS.hidden=true;globalLoop.stats.EPS.hidden=true;globalLoop.callbacks.onInit=function()end;globalLoop.callbacks.onEvent=function()end;globalLoop.callbacks.onClock=function()end;globalLoop.selectedGroup='none'globalLoop.group={none={callbacks={onClock=function()end,onEvent=function()end,onTimer=function()end,onMonitorChange=function()end,onSet=function()end,onUnset=function()end},objs={}},LIBPrivate={callbacks={onClock=function()end,onEvent=function()end,onTimer=function()end,onMonitorChange=function()end,onSet=function()end,onUnset=function()end},objs={}}}globalLoop.events={draw={},touch={},tick={},key={},char={},mouse_drag={}}end;function stopLoop()globalLoop.enabled=false;globalLoop.callbacks.onStop()globalLoop.events={draw={},touch={},tick={},key={},char={},mouse_drag={}}end;function loop()globalLoop.enabled=true;if globalLoop.autoClear then bClearMonitorGroup()end;updateLoopEvents()globalLoop.callbacks.onInit()drawLoopOBJs()local bd=Clock.new(1)bd.FPS=0;bd.EPS=0;bd:setCallback(event.clock.onClock,function(self,event)globalLoop.stats.FPS.text=tostring(self.FPS)..'FPS'globalLoop.stats.EPS.text=tostring(self.EPS)..'EPS'if globalLoop.stats.automaticPos then local b6=globalLoop.stats.automaticPosOffset.x;local b7=globalLoop.stats.automaticPosOffset.y;globalLoop.stats.FPS.pos.x=globalMonitorWidth-#globalLoop.stats.FPS.text+1+b6;globalLoop.stats.FPS.pos.y=globalMonitorHeight-1+b7;globalLoop.stats.EPS.pos.x=globalMonitorWidth-#globalLoop.stats.EPS.text+1+b6;globalLoop.stats.EPS.pos.y=globalMonitorHeight+b7 end;self.FPS=0;self.EPS=0 end)local be=os.clock()while globalLoop.enabled do if globalLoop.wasGroupChanged then updateLoopEvents()globalLoop.wasGroupChanged=false end;local aX=os.startTimer(globalLoop.timerSpeed)local event={os.pullEvent()}if event[1]=='monitor_touch'and(event[2]==globalMonitorName or globalMonitorGroup.enabled and tableHasValue(globalMonitorGroup.list,event[2]))then touchLoopOBJs(event[3],event[4],event)elseif event[1]=='mouse_click'and(globalMonitorName=='term'or globalMonitorGroup.enabled and tableHasValue(globalMonitorGroup.list,'term'))then touchLoopOBJs(event[3],event[4],event)elseif event[1]=='key'then for G,an in pairs(globalLoop.events.key)do an:key(event)end elseif event[1]=='char'then for G,an in pairs(globalLoop.events.char)do an:char(event)end elseif event[1]=='mouse_drag'then for G,an in pairs(globalLoop.events.mouse_drag)do an:mouse_drag(event)end elseif event[1]=='timer'then globalLoop.callbacks.onTimer(event)globalLoop.group[globalLoop.selectedGroup].callbacks.onTimer(event)end;globalLoop.clock=os.clock()if globalLoop.clock>=be+globalLoop.clockSpeed then be=os.clock()if globalLoop.drawOnClock then if APLWD.enabled and globalLoop.APLWDClearCacheOnDraw then APLWD.clearCache()end;if globalLoop.autoClear and not globalMonitorBuffer.enabled then bClearMonitorGroup()end;globalLoop.callbacks.onClock(event)globalLoop.group[globalLoop.selectedGroup].callbacks.onClock(event)drawLoopOBJs()bd.FPS=bd.FPS+1 else globalLoop.callbacks.onClock(event)globalLoop.group[globalLoop.selectedGroup].callbacks.onClock(event)end;if APLWD.enabled and globalLoop.APLWDBroadcastOnClock then APLWD.broadcastCache()end end;if not globalLoop.drawOnClock then if APLWD.enabled and globalLoop.APLWDClearCacheOnDraw then APLWD.clearCache()end;if globalLoop.autoClear and not globalMonitorBuffer.enabled then bClearMonitorGroup()end;globalLoop.callbacks.onEvent(event)globalLoop.group[globalLoop.selectedGroup].callbacks.onEvent(event)drawLoopOBJs()bd.FPS=bd.FPS+1 else globalLoop.callbacks.onEvent(event)globalLoop.group[globalLoop.selectedGroup].callbacks.onEvent(event)end;for G,an in pairs(globalLoop.events.tick)do an:tick(event)end;bd:tick()bd.EPS=bd.EPS+1;os.cancelTimer(aX)end end;function getOBJSEvents(y)assert(type(y)=='table','getOBJSEvents: table must be a table, got '..type(y))local bf={draw={},touch={},tick={},key={},char={},mouse_drag={}}for G,an in pairs(y)do if an.draw then table.insert(bf.draw,1,an)end;if an.touch then table.insert(bf.touch,an)end;if an.tick then table.insert(bf.tick,an)end;if an.key then table.insert(bf.key,an)end;if an.char then table.insert(bf.char,an)end;if an.mouse_drag then table.insert(bf.mouse_drag,an)end end;return bf end;function updateLoopEvents()local bg={}for G,an in pairs(globalLoop.group.LIBPrivate.objs)do table.insert(bg,an)end;for G,an in pairs(globalLoop.group[globalLoop.selectedGroup].objs)do table.insert(bg,an)end;globalLoop.events=getOBJSEvents(bg)end;function drawLoopOBJs()if globalMonitorGroup.enabled then if globalMonitorBuffer.enabled then globalMonitorBuffer.clear()end;globalLoop.callbacks.onMonitorChange(monitorName)globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)for w,an in pairs(globalLoop.events.draw)do an:draw()end;if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()end;local E=APLWD.cacheWritable;if APLWD.enabled and E then APLWD.cacheWritable=false end;local F=globalMonitorName;for G,monitorName in pairs(globalMonitorGroup.list)do if monitorName~=F then setMonitor(monitorName)globalLoop.callbacks.onMonitorChange(monitorName)globalLoop.group[globalLoop.selectedGroup].callbacks.onMonitorChange(monitorName)if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()else for w,an in pairs(globalLoop.events.draw)do an:draw()end end end end;setMonitor(F)if APLWD.enabled and E then APLWD.cacheWritable=true end else if globalMonitorBuffer.enabled then globalMonitorBuffer.clear()end;for w,an in pairs(globalLoop.events.draw)do an:draw()end;if globalMonitorBuffer.enabled then globalMonitorBuffer.draw()end end end;function touchLoopOBJs(X,Y,C)assert(type(X)=='number','touchLoopOBJs: x must be a number, got '..type(X))assert(type(Y)=='number','touchLoopOBJs: y must be a number, got '..type(Y))local bh=false;for G,an in pairs(globalLoop.events.touch)do if an:touch(X,Y,C,bh)then bh=true end end end;local bi={...}if table.maxn(bi)>0 then bi[1]=string.lower(bi[1])if bi[1]=='ver'then print('Lib version: '..ver)elseif bi[1]=='setup'then if shell then local bj='/'..shell.getRunningProgram()OSSettings.set('APLibPath',bj)print('Setup completed!\nAPLibPath: '..tostring(settings.get('APLibPath')))sleep(2)os.reboot()else error('Setup failed, shell API not available!')end elseif bi[1]=='create'then if bi[2]then local Z='\n-- //AUTO-GENERATED-CODE//\nlocal APLibPath = settings.get(\'APLibPath\')\n\nassert(  -- check if setup was done before, if not return with an error\n    type(APLibPath) == \'string\',\n    \'Couldn\\\'t open APLib through path: \'..tostring(\n        APLibPath\n    )..\'; probably you haven\\\'t completed Lib setup via \\\'LIBFILE setup\\\' or the setup failed\'\n)\n\nassert( -- check if Lib is still there, if not return with an error\n    fs.exists(APLibPath),\n    \'Couldn\\\'t open APLib through path: \'..tostring(\n      	APLibPath\n    )..\'; remember that if you move the Lib\\\'s folder you must set it up again via \\\'LIBFILE setup\\\'\'\n)\n\nos.loadAPI(APLibPath) -- load Lib with CraftOS\'s built-in feature\n\nAPLibPath = fs.getName(APLibPath)\nif APLibPath:sub(#APLibPath - 3) == \'.lua\' then APLibPath = APLibPath:sub(1, #APLibPath - 4); end\nlocal APLib = _ENV[APLibPath]\nAPLibPath = nil\n-- //--//\n\n'local bk='/'..bi[2]if fs.exists(bk)then print('Are you sure you want to overwrite: '..bk)print('Press ENTER to confirm or another key to cancel.')local event={os.pullEvent('key')}if event[2]==28 then local bl=fs.open(bk,'w')if bl then bl.write(Z)bl.close()print('File succesfully created!')else print('Couldn\'t create file.')end else print('File wasn\'t created!')end else local bl=fs.open(bk,'w')if bl then bl.write(Z)bl.close()print('File succesfully created!')else print('Couldn\'t create file.')end end else print('You must specify the name of the file you want to create.')end end end